{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string"
    },
    "devOpsFQDN": {
      "type": "string"
    },
    "uniqueString": {
      "type": "string"
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "clusterName": {
      "type": "string"
    },
    "nodeCount": {
      "type": "int"
    },
    "vmSize": {
      "type": "string"
    },
    "diskSize": {
      "type": "int"
    },
    "osSettings": {
      "type": "object"
    },
    "dbSubnetStartAddress": {
            "type": "string",
            "defaultValue": "10.0.0.5",
            "metadata": {
                "description": "Start IP address in the subnet for the VMs"
            }
    },
    "namespace": {
      "type": "string"
    },
    "publicIpOnNodes": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"]
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual network to deploy into"
      }
    },
    "vnetRG": {
      "type": "string",
      "metadata": {
        "description": "Resource group of vnet if different"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Subnet to deploy into"
      }
    },
    "vnetCIDR": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "CIDR of vnet."
      }
    },
    "subnetCIDR": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "CIDR of subnet."
      }
    },
    "nicOffset": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "offset for nic  and VMs."
      }
    }

  },
  "variables": {
    "vmName": "[concat(parameters('namespace'), 'vm')]",
    "subnetId": "[resourceId(parameters('vnetRG'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
    "sa": "[parameters('dbSubnetStartAddress')]",
    "ipOctet01": "[concat(split(variables('sa'), '.')[0], '.', split(variables('sa'), '.')[1], '.')]",
    "ipOctet2": "[int(split(variables('sa'), '.')[2])]",
    "ipOctet3": "[int(split(variables('sa'), '.')[3])]",
    "faultDomainCountMap": {
      "australiaeast": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "australiasoutheast": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "brazilsouth": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "canadacentral": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "canadaeast": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "centralindia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "centralus": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "centraluseuap": {
          "MaximumPlatformFaultDomainCount": 1
      },
      "eastasia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "eastus": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "eastus2": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "eastus2euap": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "francecentral": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "japaneast": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "japanwest": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "koreacentral": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "koreasouth": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "northcentralus": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "northeurope": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "southcentralus": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "southeastasia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "southindia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "uksouth": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "ukwest": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "usdodcentral": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "usdodeast": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "usgovarizona": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "usgovtexas": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "usgovvirginia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "westcentralus": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "westeurope": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "westindia": {
          "MaximumPlatformFaultDomainCount": 2
      },
      "westus": {
          "MaximumPlatformFaultDomainCount": 3
      },
      "westus2": {
          "MaximumPlatformFaultDomainCount": 2
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "nodeNSG",
      "location": "[parameters('location')]",
      "condition": "[equals(parameters('publicIpOnNodes'), 'yes')]",
      "apiVersion": "2017-11-01",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "CassandraClient",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "9042",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          },
          {
            "name": "DSEInterNode",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "7000",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 410,
              "direction": "Inbound"
            }
          },
          {
            "name": "DSEJMX",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "7199",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 420,
              "direction": "Inbound"
            }
          },
          {
            "name": "DSEInterNodeSSL",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "7001",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 430,
              "direction": "Inbound"
            }
          },
          {
            "name": "SparkAppWeb",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "4040",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 700,
              "direction": "Inbound"
            }
          },
          {
            "name": "SparkMasterWeb",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "7080",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 800,
              "direction": "Inbound"
            }
          },
          {
            "name": "SparkWorkerWeb",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "7081",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 900,
              "direction": "Inbound"
            }
          },
          {
            "name": "SparkREST",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "8090",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "DSEFS",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "5598-5599",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1050,
              "direction": "Inbound"
            }
          },
          {
            "name": "Gremlin",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "8182",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1700,
              "direction": "Inbound"
            }
          },
          {
            "name": "SolrGUI",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "8983",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1800,
              "direction": "Inbound"
            }
          },
          {
            "name": "devOpsAgent",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "61621",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 4000,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-12-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[parameters('namespace')]",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount":"[variables('faultdomainCountMap')[tolower(replace(parameters('location'),' ',''))].MaximumPlatformFaultDomainCount]",
        "platformUpdateDomainCount": 18
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "2017-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]",
      "location": "[parameters('location')]",
      "condition": "[equals(parameters('publicIpOnNodes'), 'yes')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'ipLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('namespace'), 'vm', copyIndex(parameters('nicOffset')), parameters('uniqueString'))]"
        }
      }
    },
    {
      "apiVersion": "2017-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'nicLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]",
        "Microsoft.Network/networkSecurityGroups/nodeNSG"
      ],
      "properties": {
        "networkSecurityGroup": "[if(equals(parameters('publicIpOnNodes'), 'yes') , json(concat('{\"id\": \"', resourceId('Microsoft.Network/networkSecurityGroups', 'nodeNSG'),'\"}')), json('null'))]",
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": "[if(equals(parameters('publicIpOnNodes'), 'yes') , json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))),'\"}')), json('null'))]",
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('ipOctet01'), add(variables('ipOctet2'), div(copyIndex(variables('ipOctet3')), 255)), '.', mod(copyIndex(variables('ipOctet3')), 255))]",
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'vmLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', parameters('namespace'))]"
      ],
      "plan": {
        "name": "[parameters('osSettings').imageReference.sku]",
        "publisher": "[parameters('osSettings').imageReference.publisher]",
        "product": "[parameters('osSettings').imageReference.offer]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('namespace')))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('namespace'), 'vm', copyIndex(parameters('nicOffset')))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[parameters('osSettings').imageReference]",
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": "[if( greater(parameters('diskSize'), 0 ) , json(concat('[{\"diskSizeGB\": \"', parameters('diskSize'), '\", \"lun\": 0, \"createOption\": \"Empty\"}]')), json('[]') )]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset'))))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('namespace'), 'vm',copyindex('dc0vmNodesLoop',parameters('nicOffset')), '/installnodes')]",
      "apiVersion": "2017-12-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dc0vmNodesLoop",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat(parameters('namespace'), 'vm', copyindex(parameters('nicOffset')))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,

        "settings": {
          "fileUris": "[parameters('osSettings').scripts]"
        },
        "protectedSettings": {
          "commandToExecute": "[concat('bash node.sh ',    parameters('devOpsFQDN'), ' ', parameters('namespace'),' ', parameters('diskSize'),' ', parameters('clusterName'))]"
        }
      }
  }



  ],
  "outputs": {
     "nodePubIp": {
      "type": "string",
      "value": "[if(equals(parameters('publicIpOnNodes'), 'yes'), reference(resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('namespace'), 'vm0'))).ipAddress, 'null')]"
    }
  }
}
